// Copyright 2013, Big Switch Networks, Inc.
//
// LoxiGen is licensed under the Eclipse Public License, version 1.0 (EPL), with
// the following special exception:
//
// LOXI Exception
//
// As a special exception to the terms of the EPL, you may distribute libraries
// generated by LoxiGen (LoxiGen Libraries) under the terms of your choice, provided
// that copyright and licensing notices generated by LoxiGen are not altered or removed
// from the LoxiGen Libraries and the notice provided below is (i) included in
// the LoxiGen Libraries, if distributed in source code form and (ii) included in any
// documentation for the LoxiGen Libraries, if distributed in binary form.
//
// Notice: "Copyright 2013, Big Switch Networks, Inc. This library was generated by the LoxiGen Compiler."
//
// You may not use this file except in compliance with the EPL or LOXI Exception. You may obtain
// a copy of the EPL at:
//
// http://www.eclipse.org/legal/epl-v10.html
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// EPL for the specific language governing permissions and limitations
// under the EPL.

#version any

struct of_action_nx_resubmit : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 1;
    uint16_t value;
};

struct of_action_nx_set_tunnel : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 2;
    uint32_t value;
};

struct of_action_nx_pop_queue : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 5;
};

struct of_action_nx_reg_move(align=8) : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 6;
    uint16_t n_bits;
    uint16_t src_ofs;
    uint16_t dst_ofs;
    of_oxm_id_t src;
    of_oxm_id_t dst;
};

struct of_action_nx_reg_load : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 7;
    uint16_t ofs_nbits;
    of_oxm_id_t src_field;
    uint64_t value;
};

struct of_action_nx_note : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 8;
    of_octets_t note;
};

struct of_action_nx_set_tunnel64 : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 9;
    uint64_t value;
};

struct of_action_nx_multipath : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 10;
    uint16_t fields;
    uint16_t basis;
    pad(2);
    uint16_t algorithm;
    uint16_t max_link;
    uint32_t arg;
    pad(2);
    uint16_t ofs_nbits;
    of_oxm_id_t dst;
};

struct of_action_nx_bundle : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 12;
    uint16_t algorithm;
    uint16_t fields;
    uint16_t basis;
    uint32_t slave_type;
    uint16_t n_slaves;
    uint16_t ofs_nbits;
    of_oxm_id_t dst;
    pad(4);
};

struct of_action_nx_bundle_load : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 13;
    uint16_t algorithm;
    uint16_t fields;
    uint16_t basis;
    uint32_t slave_type;
    uint16_t n_slaves;
    uint16_t ofs_nbits;
    uint32_t dst;
    pad(4);
};

struct of_action_nx_resubmit_table : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 14;
    uint16_t in_port;
    uint8_t table;
    pad(3);
};

struct of_action_nx_output_reg : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 15;
    uint16_t ofs_nbits;
    uint32_t src;
    uint16_t max_len;
    pad(6);
};

struct of_action_nx_learn : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 16;
    uint16_t idle_timeout;
    uint16_t hard_timeout;
    uint16_t priority;
    uint64_t cookie;
    uint16_t flags;
    uint8_t table_id;
    pad(1);
    uint16_t fin_idle_timeout;
    uint16_t fin_hard_timeout;
};

struct of_action_nx_exit : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 17;
};

struct of_action_nx_fin_timeout : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 19;
    uint16_t fin_idle_timeout;
    uint16_t fin_hard_timeout;
    pad(2);
};

struct of_action_nx_controller : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 20;
    uint16_t max_len;
    uint16_t controller_id;
    uint8_t reason;
    pad(1);
};

struct of_action_nx_dec_ttl_cnt_ids : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 21;
    uint16_t n_controllers;
    pad(4);
};

struct of_action_nx_write_metadata : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 22;
    pad(6);
    uint64_t metadata;
    uint64_t mask;
};

struct of_action_nx_stack_push : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 27;
    uint16_t offset;
    pad(12);
};

struct of_action_nx_stack_pop : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 28;
    uint16_t offset;
    pad(12);
};

struct of_action_nx_sample : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 29;
    uint16_t probability;
    uint32_t collector_set_id;
    uint32_t obs_domain_id;
    uint32_t obs_point_id;
};

struct of_action_nx_output_reg2 : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 32;
    uint16_t ofs_nbits;
    uint16_t max_len;
    pad(10);
};

struct of_action_nx_reg_load2 : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 33;
    pad(6);
};

struct of_action_nx_conjunction : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 34;
    uint8_t clause;
    uint8_t n_clauses;
    uint32_t id;
};

struct of_action_nx_ct : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 35;
    uint16_t flags;
    uint32_t zone_src;
    uint16_t value;
    uint8_t recirc_table;
    pad(3);
    uint16_t alg;
    list(of_action_t) actions;
};

enum of_nx_nat_range(wire_type=uint16_t, bitmask=True, complete=True) {
    NX_NAT_RANGE_IPV4_MIN  = 1,
    NX_NAT_RANGE_IPV4_MAX  = 2,
    NX_NAT_RANGE_IPV6_MIN  = 4,
    NX_NAT_RANGE_IPV6_MAX  = 8,
    NX_NAT_RANGE_PROTO_MIN = 16,
    NX_NAT_RANGE_PROTO_MAX = 32,
};

struct of_action_nx_nat : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 36;
    pad(2);
    uint16_t flags;
    enum of_nx_nat_range range_present;
    of_ipv4_t ipv4_min if range_present & 1;
    of_ipv4_t ipv4_max if range_present & 2;
    of_ipv6_t ipv6_min if range_present & 4;
    of_ipv6_t ipv6_max if range_present & 8;
    uint32_t proto_min if range_present & 16;
    uint32_t proto_max if range_present & 32;
};

enum nx_action_controller2_prop_type(wire_type=uint16_t) {
    NXAC2PT_MAX_LEN = 0,
    NXAC2PT_CONTROLLER_ID = 1,
    NXAC2PT_REASON = 2,
    NXAC2PT_USERDATA = 3,
    NXAC2PT_PAUSE = 4,
    NXAC2PT_METER_ID = 5,
};

struct of_action_nx_controller2_property {
    enum nx_action_controller2_prop_type type == ?;
};

struct of_action_nx_controller2_property_max_len(align=8, length_includes_align=False) : of_action_nx_controller2_property {
    enum nx_action_controller2_prop_type type == 0;
    uint16_t max_len;
};

struct of_action_nx_controller2_property_controller_id(align=8, length_includes_align=False) : of_action_nx_controller2_property {
    enum nx_action_controller2_prop_type type == 1;
    uint16_t controller_id;
};

struct of_action_nx_controller2_property_reason(align=8, length_includes_align=False) : of_action_nx_controller2_property {
    enum nx_action_controller2_prop_type type == 2;
    enum ofp_packet_in_reason reason;
};

struct of_action_nx_controller2_property_userdata(align=8, length_includes_align=False) : of_action_nx_controller2_property {
    enum nx_action_controller2_prop_type type == 3;
    uint16_t length;
    of_octets_t userdata;
};

struct of_action_nx_controller2_property_pause(align=8, length_includes_align=False) : of_action_nx_controller2_property {
    enum nx_action_controller2_prop_type type == 4;
};

struct of_action_nx_controller2_property_meter_id(align=8, length_includes_align=False) : of_action_nx_controller2_property {
    enum nx_action_controller2_prop_type type == 5;
    uint32_t meter_id;
};

struct of_action_nx_controller2 : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 37;
    pad(6);
    list(of_action_nx_controller2_property_t) properties;
};

struct of_action_nx_sample2 : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 38;
    uint16_t probability;
    uint32_t collector_set_id;
    uint32_t obs_domain_id;
    uint32_t obs_point_id;
    uint16_t sampling_port;
    uint8_t direction;
    pad(5);
};

struct of_action_nx_output_trunc : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 39;
    uint16_t port;
    uint32_t max_len;
};

struct of_action_nx_sample3 : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 41;
    uint16_t probability;
    uint32_t collector_set_id;
    uint32_t obs_domain_id;
    uint32_t obs_point_id;
    uint16_t sampling_port;
    uint8_t direction;
    pad(5);
};

struct of_action_nx_clone : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 42;
    pad(6);
};

struct of_action_nx_ct_clear : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 43;
};

struct of_action_nx_resubmit_table_ct : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 44;
    uint16_t in_port;
    uint8_t table;
    pad(3);
};

struct of_action_nx_learn2 : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 45;
};

struct of_action_nx_encap : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 46;
    uint16_t hdr_size;
    uint32_t new_pkt_type;
    list(ofp_ed_prop_header_t) props;
};

struct of_action_nx_decap : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 47;
    pad(2);
    uint32_t new_pkt_type;
};

struct of_action_nx_debug_recirc : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 255;
};

struct of_action_nx_set_queue : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 4;
    uint32_t value;
};

struct of_action_nx_push_mpls : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 23;
    uint16_t value;
};

struct of_action_nx_pop_mpls : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 24;
    uint16_t value;
};

struct of_action_nx_set_mpls_ttl : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 25;
    uint8_t value;
};

struct of_action_nx_dec_mpls_ttl : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 26;
};

struct of_action_nx_set_mpls_label : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 30;
    uint32_t value;
};

struct of_action_nx_set_mpls_tc : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 31;
    uint8_t value;
};

struct of_action_nx_group : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 40;
    uint32_t value;
};

struct of_action_nx_dec_nsh_ttl : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 48;
};

struct of_action_nx_debug_slow : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 254;
};
