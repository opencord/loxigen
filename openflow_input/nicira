// Copyright 2013, Big Switch Networks, Inc.
//
// LoxiGen is licensed under the Eclipse Public License, version 1.0 (EPL), with
// the following special exception:
//
// LOXI Exception
//
// As a special exception to the terms of the EPL, you may distribute libraries
// generated by LoxiGen (LoxiGen Libraries) under the terms of your choice, provided
// that copyright and licensing notices generated by LoxiGen are not altered or removed
// from the LoxiGen Libraries and the notice provided below is (i) included in
// the LoxiGen Libraries, if distributed in source code form and (ii) included in any
// documentation for the LoxiGen Libraries, if distributed in binary form.
//
// Notice: "Copyright 2013, Big Switch Networks, Inc. This library was generated by the LoxiGen Compiler."
//
// You may not use this file except in compliance with the EPL or LOXI Exception. You may obtain
// a copy of the EPL at:
//
// http://www.eclipse.org/legal/epl-v10.html
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// EPL for the specific language governing permissions and limitations
// under the EPL.

#version any

enum nx_flow_monitor_flags(wire_type=uint16_t, bitmask=True) {
    NXFMF_INITIAL = 0x1,
    NXFMF_ADD = 0x2,
    NXFMF_DELETE = 0x4,
    NXFMF_MODIFY = 0x8,
    NXFMF_ACTIONS = 0x10,
    NXFMF_OWN = 0x20,
};

enum nx_bd_algorithms(wire_type=uint16_t, complete=True) {
    NX_BD_ALG_ACTIVE_BACKUP = 0,
    NX_BD_ALG_HRW = 1,
};

enum nx_hash_fields(wire_type=uint16_t, complete=True) {
    NX_HASH_FIELDS_ETH_SRC = 0,
    NX_HASH_FIELDS_SYMMETRIC_L4 = 1,
    NX_HASH_FIELDS_SYMMETRIC_L3L4 = 2,
    NX_HASH_FIELDS_SYMMETRIC_L3L4_UDP = 3,
    NX_HASH_FIELDS_NW_SRC = 4,
    NX_HASH_FIELDS_NW_DST = 5,
    NX_HASH_FIELDS_SYMMETRIC_L3 = 6,
};

enum nx_mp_algorithm(wire_type=uint16_t, complete=True) {
    NX_MP_ALG_MODULO_N = 0,
    NX_MP_ALG_HASH_THRESHOLD = 1,
    NX_MP_ALG_HRW = 2,
    NX_MP_ALG_ITER_HASH = 3,
};

struct of_nicira_match(align=8, length_includes_align=False) {
    list(of_oxm_t) nxm_entries;
};

// Nicira extension message
struct of_nicira_header : of_experimenter {
    uint8_t version;
    uint8_t type == 4;
    uint16_t length;
    uint32_t xid;
    uint32_t experimenter == 0x2320;
    uint32_t subtype == ?;
};

// Nicira extension action
struct of_action_nicira : of_action_experimenter {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == ?;
    pad(6);
};

struct of_nicira_flow_stats_request : of_experimenter_stats_request {
    uint8_t version;
    uint8_t type == 16;
    uint16_t length;
    uint32_t xid;
    uint16_t stats_type == 0xffff;
    enum ofp_stats_reply_flags flags;
    uint32_t experimenter == 0x2320;
    uint32_t subtype == 0;
    pad(4); // ???
    of_port_no_t out_port;
    uint16_t match_len;
    uint8_t table_id;
    pad(3);
};

struct of_nicira_flow_monitor_request : of_experimenter_stats_request {
    uint8_t version;
    uint8_t type == 16;
    uint16_t length;
    uint32_t xid;
    uint16_t stats_type == 0xffff;
    enum ofp_stats_reply_flags flags;
    uint32_t experimenter == 0x2320;
    uint32_t subtype == 0;
    pad(4); // ???
    uint32_t monitor_id;
    enum nx_flow_monitor_flags monitor_flags;
    of_port_no_t out_port;
    uint16_t match_len;
    uint8_t table_id;
    pad(5);
    of_nicira_match_t match;
};

struct of_nicira_stats_reply : of_experimenter_stats_reply {
    uint8_t version;
    uint8_t type == 17;
    uint16_t length;
    uint32_t xid;
    uint16_t stats_type == 0xffff;
    enum ofp_stats_reply_flags flags;
    uint32_t experimenter == 0x2320;
    uint32_t subtype == ?;
};

struct of_nicira_flow_stats_reply : of_nicira_stats_reply {
    uint8_t version;
    uint8_t type == 17;
    uint16_t length;
    uint32_t xid;
    uint16_t stats_type == 0xffff;
    enum ofp_stats_reply_flags flags;
    uint32_t experimenter == 0x2320;
    uint32_t subtype == 0;
    pad(4);
    list(of_nicira_flow_stats_t) stats;
};

struct of_nicira_flow_stats {
    uint16_t length;
    uint8_t table_id;
    pad(1);
    uint32_t duration_sec;
    uint32_t duration_nsec;
    uint16_t priority;
    uint16_t idle_timeout;
    uint16_t hard_timeout;
    uint16_t match_len == length(match);
    uint16_t idle_age;
    uint16_t hard_age;
    uint64_t cookie;
    uint64_t packet_count;
    uint64_t byte_count;
    of_nicira_match_t match;
    list(of_action_t) actions;
};

struct of_nicira_flow_monitor_reply : of_nicira_stats_reply {
    uint8_t version;
    uint8_t type == 17;
    uint16_t length;
    uint32_t xid;
    uint16_t stats_type == 0xffff;
    enum ofp_stats_reply_flags flags;
    uint32_t experimenter == 0x2320;
    uint32_t subtype == 2;
    pad(4); // ???
    list(of_nicira_flow_update_event_t) updates;
};

struct of_nicira_flow_update_event {
    uint16_t length;
    uint16_t event == ?;
};

struct of_nicira_flow_update_full_add : of_nicira_flow_update_event {
    uint16_t length;
    uint16_t event == 0;
    uint16_t reason;
    uint16_t priority;
    uint16_t idle_timeout;
    uint16_t hard_timeout;
    uint16_t match_len == length(match);
    uint8_t table_id;
    pad(1);
    uint64_t cookie;
    of_nicira_match_t match;
    list(of_action_t) actions;
};

struct of_nicira_flow_update_full_deleted : of_nicira_flow_update_event {
    uint16_t length;
    uint16_t event == 1;
    uint16_t reason;
    uint16_t priority;
    uint16_t idle_timeout;
    uint16_t hard_timeout;
    uint16_t match_len == length(match);
    uint8_t table_id;
    pad(1);
    uint64_t cookie;
    of_nicira_match_t match;
    list(of_action_t) actions;
};

struct of_nicira_flow_update_full_modified : of_nicira_flow_update_event {
    uint16_t length;
    uint16_t event == 2;
    uint16_t reason;
    uint16_t priority;
    uint16_t idle_timeout;
    uint16_t hard_timeout;
    uint16_t match_len == length(match);
    uint8_t table_id;
    pad(1);
    uint64_t cookie;
    of_nicira_match_t match;
    list(of_action_t) actions;
};

struct of_action_resubmit : of_action_nicira {
    uint16_t type == 65535;
    uint16_t len;
    uint32_t experimenter == 0x2320;
    uint16_t subtype == 14;
    uint16_t in_port;
    uint8_t table;
    pad(3);
};
