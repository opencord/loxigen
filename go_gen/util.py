# Copyright 2013, Big Switch Networks, Inc.
# Copyright 2018, Red Hat, Inc.
#
# LoxiGen is licensed under the Eclipse Public License, version 1.0 (EPL), with
# the following special exception:
#
# LOXI Exception
#
# As a special exception to the terms of the EPL, you may distribute libraries
# generated by LoxiGen (LoxiGen Libraries) under the terms of your choice, provided
# that copyright and licensing notices generated by LoxiGen are not altered or removed
# from the LoxiGen Libraries and the notice provided below is (i) included in
# the LoxiGen Libraries, if distributed in source code form and (ii) included in any
# documentation for the LoxiGen Libraries, if distributed in binary form.
#
# Notice: "Copyright 2013, Big Switch Networks, Inc. This library was generated by the LoxiGen Compiler."
#
# You may not use this file except in compliance with the EPL or LOXI Exception. You may obtain
# a copy of the EPL at:
#
# http://www.eclipse.org/legal/epl-v10.html
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# EPL for the specific language governing permissions and limitations
# under the EPL.

"""
Utilities for generating the target golang code
"""
import os
import loxi_utils.loxi_utils as utils
import template_utils as template_utils

templates_dir = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'templates')
template_path = [templates_dir, templates_dir + '/locitest']

def render_template(out, name, **context):
    template_utils.render_template(out, name, template_path, context)

preserve_uppercase = [
    "TCP",
    "SSL",
    "ICMP",
    "VLAN",
    "BSN",
    "GRE",
    "DSCP",
    "MAC",
    "STP",
    "ARP",
    "PCP",
    "OXM",
    "ID"
]

def go_ident(name):
    split = name.split('_')
    goname = ""
    for i, part in enumerate(split):
        if (i == 0) and part in ("of", "ofp", "OFP"):
            continue
        if (i == 0 and not part.startswith('OF')) or (i != 0 and not part in preserve_uppercase):
            part = part.title()
        goname += part
    return goname

def go_member(member):
    return "self." + go_ident(member.name)

def emit_range(start=None, end=None, length=None):
    x = str(start) if start else ""
    if end != None:
        y = end
    elif length != None:
        if start != None:
            y = "%s+%s" % (start, length)
        else:
            y = length
    else:
        y = ""
    return "%s:%s" % (x, y)
# emit_range(start=3, length=3) => [3:3+3]
# emit_range(start=None, length=3) => [:3]
# emit_range(start=None, end=6) => [:6]
# emit_range(start=)