:: # Copyright 2013, Big Switch Networks, Inc.
:: # Copyright 2018, Red Hat, Inc.
:: #
:: # LoxiGen is licensed under the Eclipse Public License, version 1.0 (EPL), with
:: # the following special exception:
:: #
:: # LOXI Exception
:: #
:: # As a special exception to the terms of the EPL, you may distribute libraries
:: # generated by LoxiGen (LoxiGen Libraries) under the terms of your choice, provided
:: # that copyright and licensing notices generated by LoxiGen are not altered or removed
:: # from the LoxiGen Libraries and the notice provided below is (i) included in
:: # the LoxiGen Libraries, if distributed in source code form and (ii) included in any
:: # documentation for the LoxiGen Libraries, if distributed in binary form.
:: #
:: # Notice: "Copyright 2013, Big Switch Networks, Inc. This library was generated by the LoxiGen Compiler."
:: #
:: # You may not use this file except in compliance with the EPL or LOXI Exception. You may obtain
:: # a copy of the EPL at:
:: #
:: # http://www.eclipse.org/legal/epl-v10.html
:: #
:: # Unless required by applicable law or agreed to in writing, software
:: # distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
:: # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
:: # EPL for the specific language governing permissions and limitations
:: # under the EPL.
::
:: from string import Template
:: from loxi_ir import *
:: import go_gen.oftype
:: import go_gen.util as util
:: import loxi_globals
:: import loxi_utils.loxi_utils as loxi_utils
::

func (self *${ofclass.goname}) Serialize(encoder *goloxi.Encoder) error {
:: root = ofclass.inheritance_root()
:: if root and root.name == "of_header":
::     for type_member in type_members:
::         if type_member.name == "type":
self.Type = ${type_member.value}
::         #endif
::     #endfor
:: #endif
::
:: length_member = ofclass.length_member
:: if (length_member or ofclass.align) and not ofclass.virtual:
    startIndex := len(encoder.Bytes())
:: #endif
::
:: if ofclass.superclass:
	if err := self.${util.go_ident(ofclass.superclass.name)}.Serialize(encoder); err != nil {
		return err
	}
:: #endif
::
:: for i, member in enumerate(members):
::     if i == 0:

::     #endif
::     if type(member) == OFPadMember:
	encoder.Write(bytes.Repeat([]byte{0}, ${member.pad_length}))
::     else:
::         # Overwrite OpenFlow version with its real value
::         if ofclass.name == "of_header" and member.name == "version":
::             member_name = version.wire_version
::         else:
::             member_name = "self." + member.goname
::         #endif
::         oftype = go_gen.oftype.lookup_type_data(member.oftype, version)
::         if loxi_utils.oftype_is_list(member.oftype):
::             include('_serialize_list.go', member=member)
::         elif oftype:
	${oftype.serialize.substitute(member=member_name)}
::         else:
::             raise Exception("Unhandled member: %s" % (str(member)))
::         #endif
::     #endif
:: #endfor
::
:: if not ofclass.virtual:
::     if length_member or ofclass.align:
   length := len(encoder.Bytes()) - startIndex
::     #endif
::     if ofclass.align:
   alignedLength := ((length + ${ofclass.align-1})/${ofclass.align} * ${ofclass.align})
::     #endif
::
:: # Overwrite length with its real value

::     if length_member:

::         if length_member.oftype == "uint8_t":
encoder.Bytes()[startIndex+${length_member.offset}] = uint8(${"alignedLength" if ofclass.length_includes_align else "length"})
::         else:
	binary.BigEndian.Put${length_member.oftype[:-2].title()}(encoder.Bytes()[startIndex+${length_member.offset}:startIndex+${length_member.offset+2}], uint16(${"alignedLength" if ofclass.length_includes_align else "length"}))
::         #endif
::     #endif
::     if ofclass.align:

    encoder.Write(bytes.Repeat([]byte{0}, alignedLength - length))

::     #endif
:: #endif

	return nil
}
