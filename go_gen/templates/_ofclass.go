:: # Copyright 2013, Big Switch Networks, Inc.
:: # Copyright 2018, Red Hat, Inc.
:: #
:: # LoxiGen is licensed under the Eclipse Public License, version 1.0 (EPL), with
:: # the following special exception:
:: #
:: # LOXI Exception
:: #
:: # As a special exception to the terms of the EPL, you may distribute libraries
:: # generated by LoxiGen (LoxiGen Libraries) under the terms of your choice, provided
:: # that copyright and licensing notices generated by LoxiGen are not altered or removed
:: # from the LoxiGen Libraries and the notice provided below is (i) included in
:: # the LoxiGen Libraries, if distributed in source code form and (ii) included in any
:: # documentation for the LoxiGen Libraries, if distributed in binary form.
:: #
:: # Notice: "Copyright 2013, Big Switch Networks, Inc. This library was generated by the LoxiGen Compiler."
:: #
:: # You may not use this file except in compliance with the EPL or LOXI Exception. You may obtain
:: # a copy of the EPL at:
:: #
:: # http://www.eclipse.org/legal/epl-v10.html
:: #
:: # Unless required by applicable law or agreed to in writing, software
:: # distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
:: # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
:: # EPL for the specific language governing permissions and limitations
:: # under the EPL.
::
:: from loxi_ir.ir import *
:: import go_gen.oftype
:: import go_gen.util as util
:: import loxi_utils.loxi_utils as loxi_utils
::
:: data_members = go_gen.oftype.class_data_members(ofclass)
::
type ${ofclass.goname} struct {
:: # Embed superclass
:: if ofclass.superclass:
	*${util.go_ident(ofclass.superclass.name)}
:: #endif
::
:: # Create struct properties
:: for member in data_members:
	${member.goname} ${member.gotype}
:: #endfor
}
::

type I${ofclass.goname} interface {
:: # Embed superclass interface
:: if ofclass.superclass:
    ${go_gen.oftype.get_go_interface(ofclass.superclass, version)}
:: else:
	goloxi.Serializable
:: #endif
::
:: # Generate prototypes for the accessors
:: for member in data_members:
	Get${member.goname}() ${member.gotype}
:: #endfor
::
:: if ofclass.name == "of_oxm":
	GetOXMName() string
	GetOXMValue() interface{}
:: elif ofclass.name == "of_oxm_id":
	GetOXMName() string
:: elif ofclass.name == "of_oxs":
	GetOXSName() string
	GetOXSValue() interface{}
:: elif ofclass.name == "of_action":
	GetActionName()   string
	GetActionFields() map[string]interface{}
:: #endif
}
::
:: # Generate accessor for every member
:: for member in data_members:

func (self *${ofclass.goname}) Get${member.goname}() ${member.gotype} {
	return self.${member.goname}
}

func (self *${ofclass.goname}) Set${member.goname}(v ${member.gotype}) {
	self.${member.goname} = v
}
:: #endfor
::
:: base_length = ofclass.embedded_length
:: base_offset = 0
:: if len(ofclass.unherited_members):
::     base_offset = ofclass.unherited_members[0].offset
:: #endif
::
:: if ofclass.superclass:
::     base_length -= (base_offset if len(ofclass.unherited_members) else ofclass.superclass.embedded_length)
:: #endif
::
:: type_members = [m for m in ofclass.unherited_members if type(m) == OFTypeMember]
::
:: include('_serialize.go', ofclass=ofclass, members=ofclass.unherited_members,
::                          type_members=type_members, base_length=base_length)
::
:: include('_decode.go', ofclass=ofclass, members=ofclass.unherited_members,
::                       base_length=base_length, base_offset=base_offset)
::
:: include('_constructor.go', ofclass=ofclass, type_members=type_members)
::
:: if ofclass.is_oxm and ofclass.name != "of_oxm":
::     include('_oxm.go', ofclass=ofclass)
:: #endif
::
:: if ofclass.is_oxm_id and ofclass.name != "of_oxm":
::     include('_oxm_id.go', ofclass=ofclass)
:: #endif
::
:: if ofclass.is_action and ofclass.name != "of_action":
::     include('_action.go', ofclass=ofclass)
:: #endif
::
:: if ofclass.is_oxs and ofclass.name != "of_oxs":
::     include('_oxs.go', ofclass=ofclass)
:: #endif