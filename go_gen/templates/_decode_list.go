:: # Copyright 2013, Big Switch Networks, Inc.
:: # Copyright 2018, Red Hat, Inc.
:: #
:: # LoxiGen is licensed under the Eclipse Public License, version 1.0 (EPL), with
:: # the following special exception:
:: #
:: # LOXI Exception
:: #
:: # As a special exception to the terms of the EPL, you may distribute libraries
:: # generated by LoxiGen (LoxiGen Libraries) under the terms of your choice, provided
:: # that copyright and licensing notices generated by LoxiGen are not altered or removed
:: # from the LoxiGen Libraries and the notice provided below is (i) included in
:: # the LoxiGen Libraries, if distributed in source code form and (ii) included in any
:: # documentation for the LoxiGen Libraries, if distributed in binary form.
:: #
:: # Notice: "Copyright 2013, Big Switch Networks, Inc. This library was generated by the LoxiGen Compiler."
:: #
:: # You may not use this file except in compliance with the EPL or LOXI Exception. You may obtain
:: # a copy of the EPL at:
:: #
:: # http://www.eclipse.org/legal/epl-v10.html
:: #
:: # Unless required by applicable law or agreed to in writing, software
:: # distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
:: # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
:: # EPL for the specific language governing permissions and limitations
:: # under the EPL.
::
:: import go_gen.util as util
:: import loxi_globals
:: import loxi_utils.loxi_utils as loxi_utils
::
:: ofproto = loxi_globals.ir[version]
:: member_ofclass = ofproto.class_by_name(loxi_utils.oftype_list_elem(member.oftype))
:: elem_length = member_ofclass.base_length
:: elem_type = util.go_ident(loxi_utils.oftype_list_elem(member.oftype))

	for decoder.Length() >= ${elem_length} {
:: if member_ofclass.embedded_struct:
		item := &${elem_type}{}
		if err := item.Decode(decoder); err != nil {
:: else:
		item, err := Decode${elem_type}(decoder)
		if err != nil {
:: #endif
::
:: if ofclass.embedded_struct:
			return err
:: else:
			return nil, err
:: #endif
		}
		${self_name}.${member.goname} = append(${self_name}.${member.goname}, item)
	}
