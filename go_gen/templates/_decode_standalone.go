:: # Copyright 2013, Big Switch Networks, Inc.
:: # Copyright 2018, Red Hat, Inc.
:: #
:: # LoxiGen is licensed under the Eclipse Public License, version 1.0 (EPL), with
:: # the following special exception:
:: #
:: # LOXI Exception
:: #
:: # As a special exception to the terms of the EPL, you may distribute libraries
:: # generated by LoxiGen (LoxiGen Libraries) under the terms of your choice, provided
:: # that copyright and licensing notices generated by LoxiGen are not altered or removed
:: # from the LoxiGen Libraries and the notice provided below is (i) included in
:: # the LoxiGen Libraries, if distributed in source code form and (ii) included in any
:: # documentation for the LoxiGen Libraries, if distributed in binary form.
:: #
:: # Notice: "Copyright 2013, Big Switch Networks, Inc. This library was generated by the LoxiGen Compiler."
:: #
:: # You may not use this file except in compliance with the EPL or LOXI Exception. You may obtain
:: # a copy of the EPL at:
:: #
:: # http://www.eclipse.org/legal/epl-v10.html
:: #
:: # Unless required by applicable law or agreed to in writing, software
:: # distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
:: # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
:: # EPL for the specific language governing permissions and limitations
:: # under the EPL.
::
:: from string import Template
:: from loxi_ir import *
:: import go_gen.oftype
:: import go_gen.util as util
:: import loxi_globals
:: import loxi_utils.loxi_utils as loxi_utils
::
:: var_name = ofclass.goname.lower()
:: if ofclass.virtual:
::     return_type = "I" + ofclass.goname
:: else:
::     return_type = "*" + ofclass.goname
:: #endif
:: if ofclass.superclass:
::     superclass = util.go_ident(ofclass.superclass.name)
func decode${ofclass.goname}(parent *${superclass}, decoder *goloxi.Decoder) (${return_type}, error) {
	${var_name} := &${ofclass.goname}{${superclass}: parent}
:: else:
func decode${ofclass.goname}(decoder *goloxi.Decoder) (${return_type}, error) {
	${var_name} := &${ofclass.goname}{}
:: #endif
:: if base_length:
	if decoder.Length() < ${base_length} {
		return nil, fmt.Errorf("${ofclass.goname} packet too short: %d < ${base_length}", decoder.Length())
	}
:: #endif
::
:: include('_decode_members.go', ofclass=ofclass, members=ofclass.unherited_members,
::                               base_length=base_length, base_offset=base_offset,
::                               self_name=var_name)
::
:: discriminator = ofclass.discriminator
:: if discriminator and hasattr(discriminator, "values"):
::     include('_decode_subclasses.go', discriminator=discriminator,
::                                      var_name=var_name)
:: else:
	return ${var_name}, nil
:: #endif
}
